services:
  # Redis - internal only
  redis:
    image: redis:7-alpine
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    networks:
      - internal
    restart: unless-stopped

  # PostgreSQL Database - internal only
  database:
    image: postgres:16-alpine3.20
    environment:
      - POSTGRES_DB=${POSTGRES_DB:-tictactoe}
      - POSTGRES_USER=${POSTGRES_USER:-tictactoe_user}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-change_this_password}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - internal
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-tictactoe_user} -d ${POSTGRES_DB:-tictactoe}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Database Migration Service - runs once then exits
  migrate:
    build:
      context: .
      dockerfile: Dockerfile.backend
      target: migration
    environment:
      - DATABASE_URL=${DATABASE_URL}
    depends_on:
      database:
        condition: service_healthy
    networks:
      - internal
    restart: "no"

  # FastAPI Backend - internal only
  backend:
    build:
      context: .
      dockerfile: Dockerfile.backend
      target: production
    environment:
      - DATABASE_URL=${DATABASE_URL}
      - REDIS_URL=${REDIS_URL}
      - SECRET_KEY=${SECRET_KEY}
      - ENVIRONMENT=${ENVIRONMENT:-production}
    depends_on:
      - redis
      - migrate
    networks:
      - internal
    restart: unless-stopped

  # Nginx Reverse Proxy with Frontend - public facing
  frontend:
    build:
      context: .
      dockerfile: Dockerfile.frontend
      target: production
    ports:
      - "4080:80"
    depends_on:
      - backend
    networks:
      - internal
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data:

networks:
  internal:
    driver: bridge
